{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore } from 'redux';\nimport { MakeStore, createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\n\nconst reducer = (state = {\n  tick: 'init'\n}, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'TICK':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tick: action.payload\n      });\n\n    case 'EVENTS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        events: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst makeStore = () => createStore(reducer);\n\nexport const wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["C:/Users/illum/Work/Code/NextRedux/src/store.js"],"names":["createStore","MakeStore","createWrapper","Context","HYDRATE","reducer","state","tick","action","type","payload","events","makeStore","wrapper","debug"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,OAAnC,EAA4CC,OAA5C,QAA2D,oBAA3D;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAT,EAA2BC,MAA3B,KAAsC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,OAAL;AACE,6CAAYE,KAAZ,GAAsBE,MAAM,CAACE,OAA7B;;AACF,SAAK,MAAL;AACE,6CAAYJ,KAAZ;AAAmBC,QAAAA,IAAI,EAAEC,MAAM,CAACE;AAAhC;;AACF,SAAK,QAAL;AACE,6CAAYJ,KAAZ;AAAmBK,QAAAA,MAAM,EAAEH,MAAM,CAACE;AAAlC;;AACF;AACE,aAAOJ,KAAP;AARJ;AAUD,CAXD;;AAaA,MAAMM,SAAS,GAAG,MAAMZ,WAAW,CAACK,OAAD,CAAnC;;AACA,OAAO,MAAMQ,OAAO,GAAGX,aAAa,CAACU,SAAD,EAAY;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore } from 'redux';\r\nimport { MakeStore, createWrapper, Context, HYDRATE } from 'next-redux-wrapper';\r\n\r\nconst reducer = (state = { tick: 'init' }, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return { ...state, ...action.payload };\r\n    case 'TICK':\r\n      return { ...state, tick: action.payload };\r\n    case 'EVENTS':\r\n      return { ...state, events: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst makeStore = () => createStore(reducer);\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}